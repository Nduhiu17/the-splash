{"version":3,"sources":["components/constants/index.js","components/actions/index.js","components/button/Button.js","components/button/index.js","components/Stats/Stats.js","components/ImageGrid/ImageGrid.js","components/Header/Header.js","components/reducers/loadingReducer.js","components/reducers/imagesReducer.js","components/reducers/errorReducer.js","components/reducers/pageReducer.js","components/reducers/statsReducer.js","components/reducers/index.js","components/api/index.js","components/sagas/imagesSaga.js","components/sagas/statsSaga.js","components/sagas/index.js","components/store/index.js","App.js","index.js"],"names":["IMAGES","LOAD","LOAD_SUCCESS","LOAD_FAIL","STATS","setImages","images","type","loadImageStats","id","setImageStats","downloads","setImageStatsError","Button","children","loading","props","className","disabled","defaultProps","Stats","stats","error","isLoading","ImageGrid","this","loadImages","imageStats","map","image","key","Math","ceil","height","width","src","urls","small","alt","user","username","JSON","stringify","onClick","Component","connect","dispatch","Header","loadingReducer","state","action","imagesReducer","errorReducer","pageReducer","statsReducer","rootReducer","combineReducers","nextPage","KEY","URL","fetchImages","page","a","fetch","response","json","data","status","Error","fetchImageStats","errors","handleImagesLoad","watchImagesLoad","getPage","select","call","put","toString","takeEvery","handleStatsRequest","watchStatsRequest","require","i","res","total","take","length","fork","rootSaga","params","all","imagesSaga","statsSaga","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","configureStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10ef9d3e.chunk.js","sourcesContent":["const IMAGES = {\n    LOAD:'IMAGE_LOAD',\n    LOAD_SUCCESS:'IMAGES_LOAD_SUCCESS',\n    LOAD_FAIL:'IMAGES_LOAD_FAIL'\n}\n\nconst STATS = {\n    LOAD:'STATS_LOAD',\n    LOAD_SUCCESS:'STATS_LOAD_SUCCESS',\n    LOAD_FAIL:'STATS_LOAD_FAIL'\n}\n\nexport {IMAGES,STATS}","import { IMAGES,STATS } from '../constants'\n\nconst loadImages = () => ({\n    type:IMAGES.LOAD\n})\n\nconst setImages = images => ({\n    type:IMAGES.LOAD_SUCCESS,\n    images\n})\n\nconst setError = error => ({\n    type:IMAGES.LOAD_FAIL,\n    error\n})\n\nconst loadImageStats = id => ({\n    type:STATS.LOAD,\n    id\n})\n\nconst setImageStats = (id,downloads) => ({\n    type:STATS.LOAD_SUCCESS,\n    id,\n    downloads\n})\n\nconst setImageStatsError = id => ({\n    type:STATS.LOAD_FAIL,\n    id\n})\n\n\nexport {\n    loadImages,\n    setImages,\n    setError,\n    loadImageStats,\n    setImageStats,\n    setImageStatsError\n}","import React from 'react';\n\nimport './styles.css';\n\nconst Button = ({ children, loading, ...props }) => (\n    <button className=\"button\" disabled={loading} {...props}>\n        {loading ? 'Loading...' : children}\n    </button>\n);\n\nButton.defaultProps = {\n    loading: false,\n};\n\nexport default Button","import Button from './Button';\n\nexport default Button;","import React from 'react';\nimport './styles.css'\n\n\nconst Stats = ({stats}) => {\n    if (!stats) {\n        return <span className='stats'>Loading...</span>\n    }\n    return (\n        <span className='stats'>\n            {stats.error && 'Error!!!'}\n            {stats.isLoading && 'Loading...!!!'}\n            {stats.downloads !== null && `Stats: ${stats.downloads}`}\n            \n        </span>\n    )\n}\n\n\nexport default Stats","import React, { Component } from \"react\";\n\nimport \"./style.css\";\nimport { connect } from \"react-redux\";\nimport { loadImages } from \"../actions\";\nimport Button from \"../button\";\nimport Stats from \"../Stats/Stats\";\n\nclass ImageGrid extends Component {\n  componentDidMount() {\n    this.props.loadImages();\n  }\n\n  render() {\n    const { images, error, isLoading, loadImages, imageStats } = this.props;\n    return (\n      <div className=\"content\">\n        <section className=\"grid\">\n          {images.map((image) => (\n            <div\n              key={image.id}\n              className={`item item-${Math.ceil(image.height / image.width)}`}\n            >\n              <Stats stats={imageStats[image.id]} />\n              <img src={image.urls.small} alt={image.user.username} />\n            </div>\n          ))}\n        </section>\n        {error && <div className=\"error\">{JSON.stringify(error)}</div>}\n        <Button onClick={() => !isLoading && loadImages()} loading={isLoading}>\n          Load More\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isLoading, images, error, imageStats }) => ({\n  isLoading,\n  images,\n  error,\n  imageStats,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadImages: () => dispatch(loadImages()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageGrid);\n","import React from 'react';\n\nimport './style.css';\n\nconst Header = () => <header>REDUX SAGA WITH UNSPLASH API</header>;\n\nexport default Header;\n","import { IMAGES } from '../constants'\n\nconst loadingReducer = (state=false,action) => {\n    switch(action.type){\n        case IMAGES.LOAD:\n            return true\n        case IMAGES.LOAD_SUCCESS:\n            return false\n        case IMAGES.LOAD_FAIL:\n            return false\n        default:\n            return state\n    }\n}\n\nexport default loadingReducer","import { IMAGES } from \"../constants\";\n\nconst imagesReducer = (state = [], action) => {\n  if (action.type === IMAGES.LOAD_SUCCESS) {\n    return [...state, ...action.images];\n  }\n  return state;\n};\n\nexport default imagesReducer;\n","import { IMAGES } from '../constants'\n\nconst errorReducer = (state=null,action) => {\n    switch (action.type) {\n        case IMAGES.LOAD_FAIL:\n            return action.error\n        case IMAGES.LOAD:\n        case IMAGES.LOAD_SUCCESS:\n            return null\n    \n        default:\n            return state\n    }\n}\n\nexport default errorReducer","import { IMAGES } from '../constants'\n\nconst pageReducer = (state = 1,action) => {\n    switch (action.type) {\n        case IMAGES.LOAD_SUCCESS:\n            return state + 1\n    \n        default:\n            return state ;\n    }\n}\n\nexport default pageReducer","import { STATS } from \"../constants\";\n\nconst statsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case STATS.LOAD:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: true,\n          downloads: null,\n          error: false,\n        },\n      };\n    case STATS.LOAD_SUCCESS:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: false,\n          downloads: action.downloads,\n          error: false,\n        },\n      };\n    case STATS.LOAD_FAIL:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: false,\n          downloads: null,\n          error: true,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default statsReducer\n","import loadingReducer from './loadingReducer';\nimport imagesReducer from './imagesReducer';\nimport errorReducer from './errorReducer';\nimport { combineReducers } from 'redux'\nimport pageReducer from './pageReducer';\nimport statsReducer from './statsReducer'\n\nconst rootReducer = combineReducers({\n    isLoading: loadingReducer,\n    images: imagesReducer,\n    error: errorReducer,\n    nextPage: pageReducer,\n    imageStats:statsReducer\n})\n\nexport default rootReducer","const KEY = '?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02';\n\nconst URL = `https://api.unsplash.com/photos/`\n\nconst fetchImages = async page => {\n    const response = await fetch(`${URL}${KEY}&per_page=3&page=${page}`)\n    const data = await response.json()\n    if (response.status > 400) {\n        throw new Error(data.error)\n    }\n\n    return data\n}\n\nconst fetchImageStats = async id => {\n    const response = await fetch(`${URL}/${id}/statistics${KEY}`);\n    const data = await response.json();\n    if (response.status >= 400) {\n        throw new Error(data.errors);\n    }\n    return data;\n};\n\n\nexport {fetchImages,fetchImageStats}","import { takeEvery, select, call,put } from \"redux-saga/effects\";\nimport { IMAGES } from \"../constants\";\nimport { fetchImages } from '../api'\nimport { setImages, setError } from '../actions'\nconst getPage = (state) => state.nextPage;\n\nfunction* handleImagesLoad() {\n  try {\n    const page = yield select(getPage);\n    const images = yield call(fetchImages, page);\n\n    yield put(setImages(images))\n  } catch (error) {\n      //dispatch error\n      yield put(setError(error.toString()))\n  }\n}\n\nexport default function* watchImagesLoad() {\n  yield takeEvery(IMAGES.LOAD, handleImagesLoad);\n}\n","import { take, fork,put, call } from \"redux-saga/effects\";\nimport { loadImageStats, setImageStats, setImageStatsError } from \"../actions\";\nimport { fetchImageStats } from \"../api\";\n\nconst { IMAGES } = require(\"../constants\");\n\nfunction* handleStatsRequest(id) {\n    for (let i = 0; i < 3; i++) {\n        try {\n            yield put(loadImageStats(id))\n            const res = yield call(fetchImageStats,id)\n            yield put(setImageStats(id,res.downloads.total))\n            return true\n          } catch (error) {\n              \n          }\n        \n    }\n\n    yield setImageStatsError(id)\n\n}\n\nexport default function* watchStatsRequest() {\n  while (true) {\n    const { images } = yield take(IMAGES.LOAD_SUCCESS);\n\n    for (let i = 0; i < images.length; i++) {\n      yield fork(handleStatsRequest, images[i].id);\n    }\n  }\n}\n","import imagesSaga from \"./imagesSaga\";\nimport statsSaga from \"./statsSaga\";\nimport { all } from \"redux-saga/effects\";\n\nexport default function* rootSaga(params) {\n  yield all([imagesSaga(), statsSaga()]);\n}\n","import { createStore,applyMiddleware,compose } from 'redux' \nimport rootReducer from '../reducers'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas'\n\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware()\n    const store = createStore(\n        rootReducer,\n        compose(\n            applyMiddleware(sagaMiddleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__ && \n            window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n\n    )\n\n    sagaMiddleware.run(rootSaga)\n \n    return store\n}\n\nexport default configureStore","import React, { Component, Fragment } from \"react\";\n\nimport ImageGrid from \"./components/ImageGrid/ImageGrid\";\nimport Header from \"./components/Header/Header\";\nimport { Provider } from \"react-redux\";\n\nimport configureStore from \"./components/store/index\";\n\nconst store = configureStore();\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Fragment>\n          <Header />\n          <ImageGrid />\n        </Fragment>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}